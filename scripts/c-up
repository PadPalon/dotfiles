#!/usr/bin/env python3

import argparse
import subprocess

target_issue = 'TOCDEV-8338'

parser = argparse.ArgumentParser()
parser.add_argument('package_names', nargs='+')
parser.add_argument('--custom-message')
parser.add_argument('--workspace')
parser.add_argument('-nc', '--no-commit', action='store_true')
parser.add_argument('-sep', '--separate-commits', action='store_true')
args = parser.parse_args()

def single_commit():
    if args.workspace is None:
        subprocess.run(['yarn', 'add', '-W'] + args.package_names)
    else:
        subprocess.run(['yarn', 'workspace', args.workspace, 'add'] + args.package_names)

    if not args.no_commit:
        if args.custom_message is None:
            version_result = subprocess.run(['yarn', 'info', args.package_names[0], 'version'], capture_output = True, text = True)
            version = version_result.stdout.splitlines()[1]
            message = f'chore: upgrade {args.package_names[0]} to {version}'
        else:
            message = f'chore: {args.custom_message}'
        subprocess.run(['git', 'add', '*'])
        subprocess.run(['git', 'commit', '-m', message, '-m', f'Refs: {target_issue}'])

def separate_commits():
    for package_name in args.package_names:
        subprocess.run(['yarn', 'add', '-W', package_name])
        version_result = subprocess.run(['yarn', 'info', package_name, 'version'], capture_output = True, text = True)
        version = version_result.stdout.splitlines()[1]
        message = f'chore: upgrade {package_name} to {version}'
        subprocess.run(['git', 'add', '*'])
        subprocess.run(['git', 'commit', '-m', message, '-m', f'Refs: {target_issue}'])

if args.separate_commits:
    separate_commits()
else:
    single_commit()
